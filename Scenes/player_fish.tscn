[gd_scene load_steps=30 format=3 uid="uid://kgu4mmo34jle"]

[ext_resource type="Script" path="res://Scripts/PlayerFish.gd" id="1_pytjm"]
[ext_resource type="Texture2D" uid="uid://cb48n0ns0ojve" path="res://Sprites/Player_Idle.png" id="2_6gqfk"]
[ext_resource type="Texture2D" uid="uid://caqafkrvvxbsy" path="res://Sprites/Player_Moving.png" id="3_26p74"]
[ext_resource type="Texture2D" uid="uid://c5n5ldw4juday" path="res://Sprites/Player_Idle_Dark.png" id="4_cidqg"]

[sub_resource type="AtlasTexture" id="AtlasTexture_7b1ka"]
atlas = ExtResource("2_6gqfk")
region = Rect2(0, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_x4xby"]
atlas = ExtResource("2_6gqfk")
region = Rect2(64, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_s5goq"]
atlas = ExtResource("2_6gqfk")
region = Rect2(128, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_rq5fo"]
atlas = ExtResource("2_6gqfk")
region = Rect2(192, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_pi0b3"]
atlas = ExtResource("2_6gqfk")
region = Rect2(256, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_dndw0"]
atlas = ExtResource("2_6gqfk")
region = Rect2(320, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_cd6qf"]
atlas = ExtResource("2_6gqfk")
region = Rect2(384, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_twkpp"]
atlas = ExtResource("2_6gqfk")
region = Rect2(448, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_rj4ky"]
atlas = ExtResource("3_26p74")
region = Rect2(0, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_oas7y"]
atlas = ExtResource("3_26p74")
region = Rect2(64, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_jc8xb"]
atlas = ExtResource("3_26p74")
region = Rect2(128, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_o5ner"]
atlas = ExtResource("3_26p74")
region = Rect2(192, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_0ul1t"]
atlas = ExtResource("3_26p74")
region = Rect2(256, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_8l8dj"]
atlas = ExtResource("3_26p74")
region = Rect2(320, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_qhrsk"]
atlas = ExtResource("3_26p74")
region = Rect2(384, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_y7gt5"]
atlas = ExtResource("3_26p74")
region = Rect2(448, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_ysh5k"]
atlas = ExtResource("3_26p74")
region = Rect2(512, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_3q5hi"]
atlas = ExtResource("3_26p74")
region = Rect2(576, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_x6q3t"]
atlas = ExtResource("3_26p74")
region = Rect2(640, 0, 64, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_4y0l2"]
atlas = ExtResource("3_26p74")
region = Rect2(704, 0, 64, 64)

[sub_resource type="SpriteFrames" id="SpriteFrames_uo2pl"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_7b1ka")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_x4xby")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_s5goq")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_rq5fo")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pi0b3")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dndw0")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_cd6qf")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_twkpp")
}],
"loop": true,
"name": &"Idle",
"speed": 12.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_rj4ky")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_oas7y")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jc8xb")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_o5ner")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_0ul1t")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_8l8dj")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qhrsk")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_y7gt5")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ysh5k")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3q5hi")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_x6q3t")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4y0l2")
}],
"loop": true,
"name": &"Moving",
"speed": 12.0
}]

[sub_resource type="Shader" id="Shader_mii0o"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable's ParticleProcessMaterial.

shader_type particles;
uniform vec3 direction;
uniform float spread;
uniform float flatness;
uniform float initial_linear_velocity_min;
uniform float initial_angle_min;
uniform float angular_velocity_min;
uniform float orbit_velocity_min;
uniform float linear_accel_min;
uniform float radial_accel_min;
uniform float tangent_accel_min;
uniform float damping_min;
uniform float scale_min;
uniform float hue_variation_min;
uniform float anim_speed_min;
uniform float anim_offset_min;
uniform float initial_linear_velocity_max;
uniform float initial_angle_max;
uniform float angular_velocity_max;
uniform float orbit_velocity_max;
uniform float linear_accel_max;
uniform float radial_accel_max;
uniform float tangent_accel_max;
uniform float damping_max;
uniform float scale_max;
uniform float hue_variation_max;
uniform float anim_speed_max;
uniform float anim_offset_max;
uniform float lifetime_randomness;
uniform vec4 color_value : source_color;
uniform vec3 gravity;
uniform sampler2D color_ramp : repeat_disable;
uniform float emission_angle;


float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

void start() {
	uint base_number = NUMBER;
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	float angle_rand = rand_from_seed(alt_seed);
	float scale_rand = rand_from_seed(alt_seed);
	float hue_rot_rand = rand_from_seed(alt_seed);
	float anim_offset_rand = rand_from_seed(alt_seed);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	float tex_angle = 1.0;
	float tex_anim_offset = 1.0;
	float spread_rad = spread * degree_to_rad;
	if (RESTART_VELOCITY) {
		float tex_linear_velocity = 1.0;
		{
			float angle1_rad = rand_from_seed_m1_p1(alt_seed) * spread_rad;
			angle1_rad += direction.x != 0.0 ? atan(direction.y, direction.x) : sign(direction.y) * (pi / 2.0);
			vec3 rot = vec3(cos(angle1_rad), sin(angle1_rad), 0.0);
			VELOCITY = rot * mix(initial_linear_velocity_min,initial_linear_velocity_max, rand_from_seed(alt_seed));
		}
	}
	float base_angle = (tex_angle) * mix(initial_angle_min, initial_angle_max, angle_rand);
	CUSTOM.x = base_angle - emission_angle * degree_to_rad;
	CUSTOM.y = 0.0;
	CUSTOM.w = (1.0 - lifetime_randomness * rand_from_seed(alt_seed));
	CUSTOM.z = (tex_anim_offset) * mix(anim_offset_min, anim_offset_max, anim_offset_rand);

	if (RESTART_ROT_SCALE) {
		TRANSFORM[0].xyz = vec3(1.0, 0.0, 0.0);
		TRANSFORM[1].xyz = vec3(0.0, 1.0, 0.0);
		TRANSFORM[2].xyz = vec3(0.0, 0.0, 1.0);
	}

	if (RESTART_POSITION) {
		TRANSFORM[3].xyz = vec3(0.0, 0.0, 0.0);
	if (RESTART_VELOCITY) VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
	TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
	VELOCITY.z = 0.0;
	TRANSFORM[3].z = 0.0;
	}
}

void process() {
	uint base_number = NUMBER;
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	float angle_rand = rand_from_seed(alt_seed);
	float scale_rand = rand_from_seed(alt_seed);
	float hue_rot_rand = rand_from_seed(alt_seed);
	float anim_offset_rand = rand_from_seed(alt_seed);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	CUSTOM.y += DELTA / LIFETIME;
	float tv = CUSTOM.y / CUSTOM.w;
	float tex_linear_velocity = 1.0;
	float tex_orbit_velocity = 1.0;
	float tex_angular_velocity = 1.0;
	float tex_linear_accel = 1.0;
	float tex_radial_accel = 1.0;
	float tex_tangent_accel = 1.0;
	float tex_damping = 1.0;
	float tex_angle = 1.0;
	float tex_anim_speed = 1.0;
	float tex_anim_offset = 1.0;
	vec3 force = gravity;
	vec3 pos = TRANSFORM[3].xyz;
	pos.z = 0.0;
	// apply linear acceleration
	force += length(VELOCITY) > 0.0 ? normalize(VELOCITY) * tex_linear_accel * mix(linear_accel_min, linear_accel_max, rand_from_seed(alt_seed)) : vec3(0.0);
	// apply radial acceleration
	vec3 org = EMISSION_TRANSFORM[3].xyz;
	vec3 diff = pos - org;
	force += length(diff) > 0.0 ? normalize(diff) * tex_radial_accel * mix(radial_accel_min, radial_accel_max, rand_from_seed(alt_seed)) : vec3(0.0);
	// apply tangential acceleration;
	float tangent_accel_val = tex_tangent_accel * mix(tangent_accel_min, tangent_accel_max, rand_from_seed(alt_seed));
	force += length(diff.yx) > 0.0 ? vec3(normalize(diff.yx * vec2(-1.0, 1.0)), 0.0) * tangent_accel_val : vec3(0.0);
	force += ATTRACTOR_FORCE;

	// apply attractor forces
	VELOCITY += force * DELTA;
	
	// orbit velocity
	float orbit_amount = tex_orbit_velocity * mix(orbit_velocity_min, orbit_velocity_max, rand_from_seed(alt_seed));
	if (orbit_amount != 0.0) {
	     float ang = orbit_amount * DELTA * pi * 2.0;
	     mat2 rot = mat2(vec2(cos(ang), -sin(ang)), vec2(sin(ang), cos(ang)));
	     TRANSFORM[3].xy -= diff.xy;
	     TRANSFORM[3].xy += rot * diff.xy;
	}
	float dmp = mix(damping_min, damping_max, rand_from_seed(alt_seed));
	if (dmp * tex_damping > 0.0) {
		float v = length(VELOCITY);
		float damp = tex_damping * dmp;
		v -= damp * DELTA;
		if (v < 0.0) {
			VELOCITY = vec3(0.0);
		} else {
			VELOCITY = normalize(VELOCITY) * v;
		}
	}
	float base_angle = (tex_angle) * mix(initial_angle_min, initial_angle_max, angle_rand);
	base_angle += CUSTOM.y * LIFETIME * (tex_angular_velocity) * mix(angular_velocity_min,angular_velocity_max, rand_from_seed(alt_seed));
	CUSTOM.x += base_angle * degree_to_rad;
	CUSTOM.z = (tex_anim_offset) * mix(anim_offset_min, anim_offset_max, rand_from_seed(alt_seed)) + tv * tex_anim_speed * mix(anim_speed_min, anim_speed_max, rand_from_seed(alt_seed));
	vec3 tex_scale = vec3(1.0);
	float tex_hue_variation = 1.0;
	float hue_rot_angle = (tex_hue_variation) * pi * 2.0 * mix(hue_variation_min, hue_variation_max, rand_from_seed(alt_seed));
	float hue_rot_c = cos(hue_rot_angle);
	float hue_rot_s = sin(hue_rot_angle);
	mat4 hue_rot_mat = mat4(vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.000, 0.000, 0.000, 1.0)) +
		mat4(vec4(0.701, -0.587, -0.114, 0.0),
			vec4(-0.299, 0.413, -0.114, 0.0),
			vec4(-0.300, -0.588, 0.886, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_c +
		mat4(vec4(0.168, 0.330, -0.497, 0.0),
			vec4(-0.328, 0.035,  0.292, 0.0),
			vec4(1.250, -1.050, -0.203, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_s;
	COLOR = hue_rot_mat * textureLod(color_ramp, vec2(tv, 0.0), 0.0) * color_value;

	TRANSFORM[0] = vec4(cos(CUSTOM.x), -sin(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[1] = vec4(sin(CUSTOM.x), cos(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[2] = vec4(0.0, 0.0, 1.0, 0.0);
	TRANSFORM[3].z = 0.0;
	float base_scale = mix(scale_min, scale_max, scale_rand);
	base_scale = sign(base_scale) * max(abs(base_scale), 0.001);
	TRANSFORM[0].xyz *= base_scale * sign(tex_scale.r) * max(abs(tex_scale.r), 0.001);
	TRANSFORM[1].xyz *= base_scale * sign(tex_scale.g) * max(abs(tex_scale.g), 0.001);
	TRANSFORM[2].xyz *= base_scale * sign(tex_scale.b) * max(abs(tex_scale.b), 0.001);
	if (CUSTOM.y > CUSTOM.w) {
		ACTIVE = false;
	}
}

"

[sub_resource type="Gradient" id="Gradient_c4ahl"]
colors = PackedColorArray(0, 0, 0, 0.686275, 1, 1, 1, 0)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_dxi8u"]
gradient = SubResource("Gradient_c4ahl")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ijchv"]
shader = SubResource("Shader_mii0o")
shader_parameter/direction = Vector3(1, 0, 0)
shader_parameter/spread = 45.0
shader_parameter/flatness = 0.0
shader_parameter/initial_linear_velocity_min = 0.0
shader_parameter/initial_angle_min = 0.0
shader_parameter/angular_velocity_min = 0.0
shader_parameter/orbit_velocity_min = 0.0
shader_parameter/linear_accel_min = 0.0
shader_parameter/radial_accel_min = 0.0
shader_parameter/tangent_accel_min = 0.0
shader_parameter/damping_min = 0.0
shader_parameter/scale_min = 1.5
shader_parameter/hue_variation_min = 0.0
shader_parameter/anim_speed_min = 0.0
shader_parameter/anim_offset_min = 0.0
shader_parameter/initial_linear_velocity_max = 0.0
shader_parameter/initial_angle_max = 0.0
shader_parameter/angular_velocity_max = 0.0
shader_parameter/orbit_velocity_max = 0.0
shader_parameter/linear_accel_max = 0.0
shader_parameter/radial_accel_max = 0.0
shader_parameter/tangent_accel_max = 0.0
shader_parameter/damping_max = 0.0
shader_parameter/scale_max = 1.5
shader_parameter/hue_variation_max = 1.0
shader_parameter/anim_speed_max = 0.0
shader_parameter/anim_offset_max = 0.0
shader_parameter/lifetime_randomness = 0.0
shader_parameter/color_value = Color(1, 1, 1, 1)
shader_parameter/gravity = Vector3(0, -1e-06, 0)
shader_parameter/emission_angle = null
shader_parameter/color_ramp = SubResource("GradientTexture1D_dxi8u")

[node name="PlayerFish" type="CharacterBody2D"]
collision_mask = 2
script = ExtResource("1_pytjm")

[node name="Sprite2D" type="AnimatedSprite2D" parent="."]
texture_filter = 1
scale = Vector2(1.5, 1.5)
sprite_frames = SubResource("SpriteFrames_uo2pl")
animation = &"Idle"
autoplay = "Idle"

[node name="CollisionShape2D" type="CollisionPolygon2D" parent="."]
rotation = 1.5708
polygon = PackedVector2Array(-3.99991, 25, 4.00009, 25, 9.00003, 6.99997, 11, -11, 18, -13.0001, 17.9999, -21.0001, 10.9999, -22, 8.99989, -31, 2.99986, -40, -3.00014, -40, -7.00013, -36, -10.0001, -23, -19.0001, -18.9999, -19, -11.9999, -11, -11, -8.99999, 4.00003)

[node name="Timer" type="Timer" parent="."]
wait_time = 0.2

[node name="CPUParticles2D" type="GPUParticles2D" parent="."]
z_index = -45
texture_filter = 1
emitting = false
process_material = SubResource("ShaderMaterial_ijchv")
texture = ExtResource("4_cidqg")
lifetime = 0.5

[node name="Camera2D" type="Camera2D" parent="."]
limit_smoothed = true
position_smoothing_enabled = true

[connection signal="timeout" from="Timer" to="." method="_on_timer_timeout"]
